{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InitMsg",
  "type": "object",
  "required": [
    "anchor_money_market_address",
    "asset_info",
    "aust_address",
    "burn_addr",
    "burn_vault_fee",
    "denom",
    "max_burn_vault_fee",
    "pool_address",
    "profit_check_address",
    "seignorage_address",
    "slippage",
    "token_code_id",
    "warchest_addr",
    "warchest_fee"
  ],
  "properties": {
    "anchor_money_market_address": {
      "type": "string"
    },
    "asset_info": {
      "$ref": "#/definitions/AssetInfo"
    },
    "aust_address": {
      "type": "string"
    },
    "burn_addr": {
      "type": "string"
    },
    "burn_vault_fee": {
      "$ref": "#/definitions/Decimal"
    },
    "denom": {
      "type": "string"
    },
    "max_burn_vault_fee": {
      "$ref": "#/definitions/Uint128"
    },
    "pool_address": {
      "type": "string"
    },
    "profit_check_address": {
      "type": "string"
    },
    "seignorage_address": {
      "type": "string"
    },
    "slippage": {
      "$ref": "#/definitions/Decimal"
    },
    "token_code_id": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "warchest_addr": {
      "type": "string"
    },
    "warchest_fee": {
      "$ref": "#/definitions/Decimal"
    }
  },
  "definitions": {
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
