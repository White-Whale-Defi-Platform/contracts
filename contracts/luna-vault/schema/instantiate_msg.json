{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "asset_info",
    "astro_lp_address",
    "bluna_address",
    "cluna_address",
    "commission_fee",
    "flash_loan_fee",
    "luna_cap",
    "memory_addr",
    "token_code_id",
    "treasury_addr",
    "treasury_fee",
    "unbonding_period"
  ],
  "properties": {
    "asset_info": {
      "$ref": "#/definitions/AssetInfo"
    },
    "astro_lp_address": {
      "description": "The address of the liquidity pool to provide bLuna-Luna assets to for passive income",
      "type": "string"
    },
    "bluna_address": {
      "type": "string"
    },
    "cluna_address": {
      "type": "string"
    },
    "commission_fee": {
      "$ref": "#/definitions/Decimal"
    },
    "flash_loan_fee": {
      "$ref": "#/definitions/Decimal"
    },
    "luna_cap": {
      "$ref": "#/definitions/Uint128"
    },
    "memory_addr": {
      "type": "string"
    },
    "token_code_id": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "treasury_addr": {
      "type": "string"
    },
    "treasury_fee": {
      "$ref": "#/definitions/Decimal"
    },
    "unbonding_period": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "vault_lp_token_name": {
      "type": [
        "string",
        "null"
      ]
    },
    "vault_lp_token_symbol": {
      "type": [
        "string",
        "null"
      ]
    }
  },
  "definitions": {
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
