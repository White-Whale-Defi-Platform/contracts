{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Receive hook for the liquidity token",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Provide liquidity to the vault",
      "type": "object",
      "required": [
        "provide_liquidity"
      ],
      "properties": {
        "provide_liquidity": {
          "type": "object",
          "required": [
            "asset"
          ],
          "properties": {
            "asset": {
              "$ref": "#/definitions/Asset"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Send back unbonded luna to the user",
      "type": "object",
      "required": [
        "withdraw_unbonded"
      ],
      "properties": {
        "withdraw_unbonded": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraws the vault's unbonded bluna or cluna from anchor/prism",
      "type": "object",
      "required": [
        "withdraw_unbonded_flashloan"
      ],
      "properties": {
        "withdraw_unbonded_flashloan": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Sets the withdraw fee and flash loan fee",
      "type": "object",
      "required": [
        "set_fee"
      ],
      "properties": {
        "set_fee": {
          "type": "object",
          "properties": {
            "commission_fee": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Fee"
                },
                {
                  "type": "null"
                }
              ]
            },
            "flash_loan_fee": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Fee"
                },
                {
                  "type": "null"
                }
              ]
            },
            "treasury_fee": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Fee"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Set the admin of the contract",
      "type": "object",
      "required": [
        "set_admin"
      ],
      "properties": {
        "set_admin": {
          "type": "object",
          "required": [
            "admin"
          ],
          "properties": {
            "admin": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Add provided contract to the whitelisted contracts",
      "type": "object",
      "required": [
        "add_to_whitelist"
      ],
      "properties": {
        "add_to_whitelist": {
          "type": "object",
          "required": [
            "contract_addr"
          ],
          "properties": {
            "contract_addr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove provided contract from the whitelisted contracts",
      "type": "object",
      "required": [
        "remove_from_whitelist"
      ],
      "properties": {
        "remove_from_whitelist": {
          "type": "object",
          "required": [
            "contract_addr"
          ],
          "properties": {
            "contract_addr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update the internal State struct",
      "type": "object",
      "required": [
        "update_state"
      ],
      "properties": {
        "update_state": {
          "type": "object",
          "properties": {
            "allow_non_whitelisted": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "astro_lp_address": {
              "type": [
                "string",
                "null"
              ]
            },
            "bluna_address": {
              "type": [
                "string",
                "null"
              ]
            },
            "cluna_address": {
              "type": [
                "string",
                "null"
              ]
            },
            "memory_address": {
              "type": [
                "string",
                "null"
              ]
            },
            "whitelisted_contracts": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Execute a flashloan",
      "type": "object",
      "required": [
        "flash_loan"
      ],
      "properties": {
        "flash_loan": {
          "type": "object",
          "required": [
            "payload"
          ],
          "properties": {
            "payload": {
              "$ref": "#/definitions/FlashLoanPayload"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swaps the passive strategy token rewards for luna",
      "type": "object",
      "required": [
        "swap_rewards"
      ],
      "properties": {
        "swap_rewards": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Internal callback message",
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "$ref": "#/definitions/CallbackMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Messages sent by unbond handlers to the vault",
      "type": "object",
      "required": [
        "unbond_handler"
      ],
      "properties": {
        "unbond_handler": {
          "$ref": "#/definitions/UnbondHandlerMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Liquidates the given unbond handler addr if it's expired",
      "type": "object",
      "required": [
        "liquidate_expired_unbond_handler"
      ],
      "properties": {
        "liquidate_expired_unbond_handler": {
          "type": "object",
          "required": [
            "liquidate_unbond_handler_addr"
          ],
          "properties": {
            "liquidate_unbond_handler_addr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "info": {
          "$ref": "#/definitions/AssetInfo"
        }
      }
    },
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "CallbackMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "after_trade"
          ],
          "properties": {
            "after_trade": {
              "type": "object",
              "required": [
                "loan_fee"
              ],
              "properties": {
                "loan_fee": {
                  "$ref": "#/definitions/Uint128"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Fee": {
      "type": "object",
      "required": [
        "share"
      ],
      "properties": {
        "share": {
          "$ref": "#/definitions/Decimal"
        }
      }
    },
    "FlashLoanPayload": {
      "type": "object",
      "required": [
        "callback",
        "requested_asset"
      ],
      "properties": {
        "callback": {
          "$ref": "#/definitions/Binary"
        },
        "requested_asset": {
          "$ref": "#/definitions/Asset"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UnbondHandlerMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "after_unbond_handler_released"
          ],
          "properties": {
            "after_unbond_handler_released": {
              "type": "object",
              "required": [
                "previous_owner",
                "unbond_handler_addr"
              ],
              "properties": {
                "previous_owner": {
                  "type": "string"
                },
                "unbond_handler_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
