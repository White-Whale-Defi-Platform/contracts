import base64
import json
import requests

import pathlib
import sys
# temp workaround
sys.path.append('/workspaces/devcontainer/terra-sdk-python')
sys.path.append('/workspaces/devcontainer/White-Whale-SDK/src')
sys.path.append(pathlib.Path(__file__).parent.resolve())

from terra_sdk.client.lcd import LCDClient, Wallet
from terra_sdk.key.mnemonic import MnemonicKey

from terra_sdk.core import Coins
from terra_sdk.core.auth import StdFee
from terra_sdk.core.wasm import MsgExecuteContract
from white_whale.deploy import Deployer
from white_whale.address.bombay_10.anchor import anchor_money_market, aust

import pathlib
import sys
sys.path.append(pathlib.Path(__file__).parent.resolve())

client = LCDClient(url="https://bombay-lcd.terra.dev", chain_id="bombay-11", gas_prices=Coins(requests.get("https://bombay-fcd.terra.dev/v1/txs/gas_prices").json()))
mnemonic = "main jar girl opinion train type cycle blood marble kitchen april champion amount engine crumble tunnel model vicious system student hood fee curious traffic"
wallet = Wallet(lcd=client, key=MnemonicKey(mnemonic))
std_fee = StdFee(5000000, "1500000uusd")

deployer = Deployer(client=client, wallet=wallet, fee=std_fee)

whale_token_addr = "terra1gxsfv4ruvda37q3ta0kwx42w7qy5l9hf9l30sz"
whale_pair_addr = "terra1tc4dertggfyz9qye4ymptneqxlye2dpgfxfrhf"
amm = "terra15dwd5mj8v59wpj0wvt233mf5efdff808c5tkal"
aterra = "terra1ajt556dpzvjwl0kl5tzku3fc3p3knkg9mkv8jl"

result = client.wasm.contract_query(amm, {
    "config": { }
})
print(result)

result = client.wasm.contract_query(aterra, {
    "token_info": { }
})
print(result)
exit()

###
# print("store contract")
# code_id = deployer.store_contract(contract_name="buy_and_burn")
# print(f"stored {code_id}")
# print("instantiate contract")

# contract_address = deployer.instantiate_contract(code_id=code_id, init_msg={
#     "quorum": "0.3",
#     "threshold": "0.5",
#     "timelock_period": 10000,
#     "voting_period": 10000,
#     "expiration_period": 20000,
#     "proposal_deposit": "1000",
#     "snapshot_period": 10
# })
# contract_address = "terra1s4v50aqdtlmd4yuehjukak04rxyd5yf2fx5c3x"
# stablecoin_vault_address = "terra1759jepndfjyfzzgexa5vmkhhaq7vyn8tq8gf5z"


# block_height = client.tendermint.block_info()['block']['header']['height']
# print(f'current block height: {block_height}')
# poll_id = 6

# result = client.wasm.contract_query(contract_address, {
#     "poll": { "poll_id": poll_id }
# })
# print(result)

# result = deployer.execute_contract(contract_address, {
#     "end_poll": { "poll_id": 4 }
# })
# print(result)

# stake_amount = 10000000
# staking_msg = {
#     "stake_voting_tokens": {}
# }
# msg = base64.b64encode(bytes(json.dumps(staking_msg), 'ascii')).decode()
# result = deployer.execute_contract(whale_token_addr, {
#     "send": {
#         "contract": contract_address,
#         "amount": str(stake_amount),
#         "msg": msg
#     }})
# print(result)

# result = deployer.execute_contract(contract_address, {
#     "cast_vote": {
#         "poll_id": poll_id,
#         "vote": "yes",
#         "amount": str(stake_amount)
#     }
# })
# print(result)

# result = client.wasm.contract_query(contract_address, {
#     "poll": { "poll_id": poll_id }
# })
# print(result)
# exit()

# result = deployer.execute_contract(contract_address, {
#     "register_contracts": { "whale_token": whale_token_addr }
# })
# print(result)

# set_slippage_msg =  {
#     "set_slippage": {
#         "slippage": "0.008"
#     }
# }
# msg = base64.b64encode(bytes(json.dumps(set_slippage_msg), 'ascii')).decode()
# poll_execute_msg = {
#     "order": 1,
#     "contract": stablecoin_vault_address,
#     "msg": msg
# }

# create_poll_msg = {
#     "create_poll": {
#         "title": "Set Slippage to 0.008",
#         "description": "set slippage to 0.008",
#         "link": "https://whitewhale.finance",
#         "execute_msgs": [poll_execute_msg]
#     }
# }
# msg = base64.b64encode(bytes(json.dumps(create_poll_msg), 'ascii')).decode()
# result = deployer.execute_contract(contract_addr=whale_token_addr, execute_msg={
#     "send": {
#         "contract": contract_address,
#         "amount": "100000",
#         "msg": msg
#     }
# })
# print(result)
# msg = base64.b64encode(bytes(json.dumps({"withdraw_liquidity": {}}), 'ascii')).decode()
# result = execute_contract(contract_addr=lp_token_address, execute_msg={
#     "send": {
#         "contract": contract_address,
#         "amount": str(lp_balance),
#         "msg": msg
#     }
# })
# print(result)

contract_address = deployer.instantiate_contract(code_id=code_id, init_msg={
    "whale_token_addr": whale_token_addr,
    "whale_pair_addr": whale_pair_addr,
    "anchor_money_market_addr": anchor_money_market,
    "aust_addr": aust,
    "anchor_deposit_threshold": str(int(10)*int(10**6)),
    "anchor_withdraw_threshold": str(int(1)*int(10**4)),
    "anchor_deposit_ratio": "0.5"
})
print(f'instantiated {contract_address}')

# })
