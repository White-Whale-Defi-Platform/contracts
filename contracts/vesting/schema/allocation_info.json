{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AllocationInfo",
  "type": "object",
  "required": [
    "canceled",
    "total_amount",
    "vest_schedule",
    "withdrawn_amount"
  ],
  "properties": {
    "canceled": {
      "description": "Indicates if this vesting allo has been canceled",
      "type": "boolean"
    },
    "total_amount": {
      "description": "Total number of WHALE tokens allocated to this account",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "unlock_schedule": {
      "description": "Parameters controlling the unlocking process",
      "anyOf": [
        {
          "$ref": "#/definitions/Schedule"
        },
        {
          "type": "null"
        }
      ]
    },
    "vest_schedule": {
      "description": "Parameters controlling the vesting process",
      "allOf": [
        {
          "$ref": "#/definitions/Schedule"
        }
      ]
    },
    "withdrawn_amount": {
      "description": "Number of WHALE tokens that have been withdrawn by the beneficiary",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    }
  },
  "definitions": {
    "Schedule": {
      "type": "object",
      "required": [
        "cliff",
        "duration",
        "start_time"
      ],
      "properties": {
        "cliff": {
          "description": "Number of seconds starting UST during which no token will be vested/unlocked",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "duration": {
          "description": "Number of seconds taken by tokens to be fully vested",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "start_time": {
          "description": "Timestamp of when vesting is to be started",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
